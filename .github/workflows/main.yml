name: Cl

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download ngrok
      run: Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip

    - name: Extract ngrok
      run: Expand-Archive ngrok.zip -Force
     
    - name: Clean up downloaded zip
      run: Remove-Item ngrok.zip -Force

    - name: Authenticate ngrok
      run: .\ngrok\ngrok.exe authtoken $Env:NGROK_AUTH_TOKEN
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1

    - name: Set Password for runneradmin
      run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText $Env:RUNNER_PASSWORD -Force)
      env:
        RUNNER_PASSWORD: ${{ secrets.RUNNER_PASSWORD }}

    - name: Start ngrok Tunnel
      run: |
        Start-Process -NoNewWindow -FilePath ".\ngrok\ngrok.exe" -ArgumentList "tcp", "3389" -PassThru
        Write-Host "ngrok tunnel started successfully."
        
    - name: Verify ngrok Tunnel
      run: |
        $ngrok_output = Get-Content .\ngrok\ngrok.log | Select-String -Pattern "tcp://"
        if ($ngrok_output -eq $null) {
          Write-Host "ngrok tunnel failed to start."
          exit 1
        } else {
          Write-Host "ngrok tunnel is running."
        }
